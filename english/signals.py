from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Payment, UserChapter
import logging

logger = logging.getLogger(__name__)


@receiver(post_save, sender=Payment)
def create_user_chapters_on_payment_approval(sender, instance, created, **kwargs):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å–∏ UserChapter –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 'paid'.
    
    –õ–æ–≥–∏–∫–∞:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ = 'paid'
    - –°–æ–∑–¥–∞—ë—Ç UserChapter –¥–ª—è –≤—Å–µ—Ö –≥–ª–∞–≤ –∫—É—Ä—Å–∞
    - –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É (order_index == 1)
    - –û—Å—Ç–∞–ª—å–Ω—ã–µ –≥–ª–∞–≤—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å = 'paid'
    if instance.status == 'paid':
        user = instance.user
        course = instance.tariff.course
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —É–∂–µ UserChapter –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å–∞
        existing_chapters_count = UserChapter.objects.filter(
            user=user,
            chapter__course=course
        ).count()
        
        total_chapters = course.chapters.count()
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç –∏–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ, —á–µ–º –≥–ª–∞–≤ –≤ –∫—É—Ä—Å–µ - —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º
        if existing_chapters_count < total_chapters:
            chapters_created = 0
            chapters_updated = 0
            
            for chapter in course.chapters.all().order_by('order_index'):
                user_chapter, was_created = UserChapter.objects.get_or_create(
                    user=user,
                    chapter=chapter,
                    defaults={
                        'is_open': chapter.order_index == 1,  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                        'is_active': False,
                        'completion_score': 0.0
                    }
                )
                
                if was_created:
                    chapters_created += 1
                    logger.info(f"‚úÖ Created UserChapter: {user.full_name} -> {chapter.name}")
                else:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞, –Ω–æ –ø–ª–∞—Ç—ë–∂ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–¥–æ–±—Ä–µ–Ω - 
                    # –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å is_open –¥–ª—è –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    if chapter.order_index == 1 and not user_chapter.is_open:
                        user_chapter.is_open = True
                        user_chapter.save()
                        chapters_updated += 1
                        logger.info(f"üîì Opened first chapter for: {user.full_name} -> {chapter.name}")
            
            if chapters_created > 0:
                logger.info(
                    f"üéâ Payment approved! Created {chapters_created} UserChapters "
                    f"for {user.full_name} in course '{course.name}' "
                    f"(Payment ID: {instance.id})"
                )
            
            if chapters_updated > 0:
                logger.info(f"üîÑ Updated {chapters_updated} existing UserChapters")
        else:
            logger.info(
                f"‚ÑπÔ∏è UserChapters already exist for {user.full_name} "
                f"in course '{course.name}' (Payment ID: {instance.id})"
            )